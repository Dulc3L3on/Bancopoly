/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrontendBancopoly;

import BackendBancopoly.ListaEnlazada;
import BackendBancopoly.Nodo;
import Casillas.Carcel;
import Casillas.Casilla;
import Tarjetas.Personalizada;
import Casillas.TomaUnaTarjeta;
import Casillas.TrampaMoverA;
import Casillas.VayaALaCarcel;
import javax.swing.*;


/**
 *
 * @author phily
 */
public class PrincipalCustomizacion extends javax.swing.JDialog {
    private JPanel casillaUbicacion;
    private Casilla casilla;//no se para que la iba a emplear, pero por el momento no tiene funcionalidad
    private VayaALaCarcel casillasVayaCarcel;
    private TomaUnaTarjeta casillaTomaTarjeta;//está aquí por VC, pero tendré que crear una lista de estas por el hecho de las casillas que mueven de los lugares
    private Casilla casillasCarcel;//por medio de este listado podrá determinarse a cual deberá apuntar la casillaVC, debido a la poca separación entre ambas    
    //a la cárcel o una tjt de este tipo existe el lugar físico de ella
    private ListaEnlazada<TomaUnaTarjeta> tomaUnaTarjeta = new ListaEnlazada();//esta es la que contiene a caminar o a moverA [o ambas]
    private ListaEnlazada<TrampaMoverA> trampaMoverA= new ListaEnlazada();//no olvides hacer esto, sino no lo estas creando xD
    private TrampaMoverA casillaTrampaMoverA;
    private TomaUnaTarjeta casillaIrACarcel;//esta es concerniente a la escogencia de personalizada, por ello de be ser tTjt para acceder a sus respectivos métodos?? mañana veremos, auqnue yo diríaque sí xD
    
    private boolean estaAsignadaCarcel;//esta será útil para que pueda habilitar el diálogo de toma una tarjeta la opción de vaya a la cárcel, hasta que tenga el valor true de nuevo podrá hacerlo, pues la var en aquel diálogo estará ini en true
    private String tipoSeleccion;
    
    CustomizacionCasillaTrampa dialogoTrampa = new CustomizacionCasillaTrampa(new javax.swing.JFrame(), true);
    CustomizacionPropiedades dialogoPropiedades = new CustomizacionPropiedades(new javax.swing.JFrame(), true);
    CustomizacionServicioYEstacion dialogoServicioYEstacion = new CustomizacionServicioYEstacion(new javax.swing.JFrame(), true);
    CustomizacionTomaTarjeta dialogoTomaTarjeta = new CustomizacionTomaTarjeta(new javax.swing.JFrame(), true);
    //recuerda cárcel y vaya a la cárcel no muestran diálogo ya que lo único que se requiere para crear a su casilla lógica y a su tjt lógica y física, es saber que fue seleccionado
    //ese tipo, ya que la forma de rxn de la casilla está en la tjt, de vaya a la cárcel, recuerda que deberás tener a la casilla cárcel en vaya a la cárcel, pues sin ella no podrá funcionar, debo
    //corroborar que por cada vaya a la cárcel exista una cárcel, no necesariamente al revés
    
    /**
     * Creates new form PrincipalCustomizacion
     */
    public PrincipalCustomizacion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void recibirCasillaSeleccionada(JPanel casillaSeccionada){
        casillaUbicacion=casillaSeccionada;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbBx_TipoCasilla = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btn_AceptarTIpo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbBx_colorCasilla = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(511, 483));
        setMinimumSize(new java.awt.Dimension(511, 483));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(83, 77, 71));

        cbBx_TipoCasilla.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lugar", "Servicio básico", "Estación", "Toma una tarjeta", "Trampa Pago a otros", "Trampa Perder turnos", "Trampa Mover a", "Vaya a la cárcel" }));
        cbBx_TipoCasilla.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbBx_TipoCasillaItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Sawasdee", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(226, 205, 205));
        jLabel1.setText("Tipo de casilla:");

        btn_AceptarTIpo.setFont(new java.awt.Font("Sawasdee", 1, 18)); // NOI18N
        btn_AceptarTIpo.setText("Aceptar");
        btn_AceptarTIpo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AceptarTIpoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Sawasdee", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(226, 205, 205));
        jLabel2.setText("Color de casilla:");

        cbBx_colorCasilla.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Azul", "Rojo", "Anaranjado", "Amarillo", "Verde", "Rosado", "Violeta", "Celeste", "Gris" }));

        jLabel3.setBackground(new java.awt.Color(251, 216, 182));
        jLabel3.setFont(new java.awt.Font("Sawasdee", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<<PERSONALIZACIÓN DE CASILLAS>>");
        jLabel3.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_AceptarTIpo)
                .addGap(55, 55, 55))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbBx_TipoCasilla, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBx_colorCasilla, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(90, 90, 90))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBx_colorCasilla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBx_TipoCasilla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(150, 150, 150)
                .addComponent(btn_AceptarTIpo)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbBx_TipoCasillaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbBx_TipoCasillaItemStateChanged
        
    }//GEN-LAST:event_cbBx_TipoCasillaItemStateChanged

    private void btn_AceptarTIpoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AceptarTIpoActionPerformed
        System.out.println((String)cbBx_TipoCasilla.getSelectedItem());
        tipoSeleccion=(String)cbBx_TipoCasilla.getSelectedItem();
        
        switch((String)cbBx_TipoCasilla.getSelectedItem()){//si no funciona es por el hecho de que este método no devuelve lo escrito en él, si no se pudiera, aunque lo dudo, deberé teckear esto cada en el parám respect
            case "Lugar":
                this.dispose();
                //no creo que fueras a llamar aquí al registro, puesto que ya se controló eso, y algo más.... no se que podría ser
                dialogoPropiedades.recibirCasillaResidencia(casillaUbicacion);
                dialogoPropiedades.establecerDatosDelCbBxConListas();
                dialogoPropiedades.setLocationRelativeTo(null);
                dialogoPropiedades.setVisible(true);                
            break;            
            
            case "Servicio básico":
                this.dispose();
                dialogoServicioYEstacion.recibirCasillaResidencia(casillaUbicacion, "Servicio básico");                
                dialogoServicioYEstacion.setLocationRelativeTo(null);
                dialogoServicioYEstacion.setVisible(true);                
            break;
            
            case "Estación":
                this.dispose();
                dialogoServicioYEstacion.recibirCasillaResidencia(casillaUbicacion, "Estación");                
                dialogoServicioYEstacion.setLocationRelativeTo(null);
                dialogoServicioYEstacion.setVisible(true);
            break;
            
            case "Toma una tarjeta":
                this.dispose();
                dialogoTomaTarjeta.deseleccionarTodasxD();
                dialogoTomaTarjeta.recibirCasillaFisica(casillaUbicacion);//pues esto le va a servir para poder asignar a retroceder el límite de pasos a retroceder
                dialogoTomaTarjeta.setLocationRelativeTo(null);
                dialogoTomaTarjeta.setVisible(true);
                
                if(dialogoTomaTarjeta.hanSeleccionadoVayaCarcel()){///pero no para la personalizada
                       //se solicitará la casilla tomaUnaTarjeta para asignarla a la var para esta casilla en espera de su carcel 
                       casillaTomaTarjeta=(TomaUnaTarjeta)dialogoTomaTarjeta.retornarCasillaLogica();
                       //se cambiará el valor de la var estaAsignada...y se mandará al diálogo para que inhabilite la opción
                       dialogoTomaTarjeta.reestablecerPermisoHabilitacionVayaCarcel(false);
                }
                
                TomaUnaTarjeta auxiliar;
                 auxiliar=(TomaUnaTarjeta)dialogoTomaTarjeta.retornarCasillaLogica();
                 
                 
                if(dialogoTomaTarjeta.hanSeleccionadoCasillaQueMUeve()){//Ya va incluido el valor de verdad de (persoanlizada) que dará true si cualquiera de las dos tjtt's implicadas han sido seleccionadas , desde la clase tomaTJt, puesto que ahí es donde se genera el diálog para personalizada donde se definen esteos valores                  
                    JOptionPane.showMessageDialog(null, "Al ser aprobado tu diseño, podrás escoger la casilla a mandará a moverse","No olvides...",JOptionPane.INFORMATION_MESSAGE);                                        
                    System.out.println("toma tjtj -> " + auxiliar);
                    tomaUnaTarjeta.anadirAlFinal(auxiliar);//debe ser así, para no andar creadno otra var, pues la de casillaTTjtj, es para cárcel                
                }
                
                   if(auxiliar.hanSeleccionadoVayaACarcel()){
                        casillaIrACarcel=(TomaUnaTarjeta)dialogoTomaTarjeta.retornarCasillaLogica();//aquí obtienes a a casilla tTjt                        
                        //Aquí llamaría al método para que en el diálogo de personalizada, se evite habi el btn correspondiente a esta 
                        //opción, lo cual se le informaría obteneiendo la var correspondiente de la casilla tomaTjt
                    }//eSTO ES POR PERSONALIZADA
                
                
                
            break;
            
            case "Vaya a la cárcel"://si haces esto estará bien para esta parte, pero asignaría aún así el índice correspondiente cuando en realidad no debría hacerlo
                //se creará la casilla lógica tipo vaya a la cárcel             
                this.dispose();              
                
                if(casillasVayaCarcel==null){//pues esto quiere decir que no hay otra casilla de este tipo en espera de su cárcel,
                //sin importar si tT-> VC está en espera o no, pues tendrían que apuntar a la misma cárcel debido a la ubicación 
                //Esto está bien por el hecho de que debe moverse secuencialmente, repetando un orden (sea libre o restringido), ya que si vaya a la cárcel estuviera despuesito del inicio y hubiera una cárcel antes de él en realidad sería la más lejana ya que debe caminar casi toda la vuelta para llegar a ella
                    Casilla casillaVayaALaCarcel = new VayaALaCarcel(casillaUbicacion);
                    casillasVayaCarcel= (VayaALaCarcel)casillaVayaALaCarcel;//debería solo ser convertida para ese momento, espero no cb de referencia, solo de máscara xD
                    System.out.println(casillaVayaALaCarcel);
                    System.out.println(casillasVayaCarcel);
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Debes crear de primero la cárcel para la casilla vaya a la cárcel, antes de crear otra", "No olvides...", JOptionPane.WARNING_MESSAGE);
                }
                
            break;
            
            case "Cárcel"://debe existir mientras exista un vaya a la cárcel o una tjta de cárcel, de tal forma que debe existir algo que controle esto, para así notificar y/o evitar que pueda seleccionarse el listo mientras esto no esté domo debe
                //crear el objeto casilla lógica Cárcel 
                //insertarlo a la lista enlazada de forma ascendente
                //verificar al presionar listo, si mínimo existe 1 cárcel para el tipo de vaya [revisando el tamño del listado] para luego al pasar esta condición encontrar la 1ra cárcel que tenga un índice mayor a dicha casilla VC
                //luego de intentar hacer esto [no me refiero a un try catch], se verificará que todas las casillas de VC, no tengan el atributo de cárcel nulo, para permitirle jugar, de lo contrario no hace nada más que mostrarle un
                //JOP, donde se le indique que debe asignarse una casilla vaya a la cárcel y depués de ella,una cárcel, no al revés, lo caul le obligará a borrarhasta cierto punto lo cual tb debería reflejarse en estas listas
                
                //en estos case, únicamente se crean los obj, se add al listado... en otro método [en el lugar del evento del btn listo] se trabajrá con el resto
                                
                if(casillasVayaCarcel!=null || casillaTomaTarjeta!= null || casillaIrACarcel!=null){
                    this.dispose();//Aunque recuerda que con la modificación en el forntend, ya no hace necesario tener estas condiciones, pues él se encarga de ponerlas(a su modo) y cumplir con lo pedido, pero si no fuera asó, esta línea está mal porque no se cerraría la ventana sino que se quedaría ahpi sin poder cerrarla [lo último lo supongo]  
                    Casilla carcel = new Carcel(casillaUbicacion);
                    casillasCarcel=carcel;
                    System.out.println(carcel);
                    System.out.println(casillasCarcel);
                    
                    if(casillasVayaCarcel!=null){
                        casillasVayaCarcel.recibirCarcelMasCercana(carcel);//Estaría modificando el contenido al que hace referencia tanto esta como la casilla que ya se mandó al recorrido
                        casillasVayaCarcel=null;//para que pueda ingresar otra, sin problema alguno, pue en este pto ya se ha add al listado
                    }
                    if(casillaTomaTarjeta!= null){
                        this.dispose();
                        //se llama al método para recibir la carcel de toma una tarjeta
                        //se envía el valor nuevo de la variable que habilita la opción VC [no olvides cambiar el estado del atrib de selecciónVC en el dialogo, sino cada vez estarás pidiendo al objtTomaTjt                                       
                        casillaTomaTarjeta.obtenerTarjetaVayaACarcel().recibirCarcelMasCercana(carcel);//Debes castear, te basas en lo que se hizo con la casilla vayaCarcel
                        dialogoTomaTarjeta.reestablecerPermisoHabilitacionVayaCarcel(true);
                        casillaTomaTarjeta=null;//ya hay espacio para una nueva 
                        
                    }

                      if(casillaIrACarcel!=null){
                        casillaIrACarcel.obtenerTarjetaPersonalizadaNecesitadaCarcel().obtenerPersonalizadaParaAsignarCarcel().recibirCarcelMasCercana(carcel);
                        //Aquí mandas a llamar al método para reestablecer la hanilitación de esta opción xD recuerda que ese método solo es necesario para los VC
                        casillaIrACarcel.obtenerDIalogoPersonalizada().establecerPermisoParaIrACarcel(true);//Esto para que vuelva a habilitarse la opción y así pueda mandar a la cárcel
                        casillaIrACarcel=null;//de esta manera se asigna la cárcel cuando se selecciona esta opción en personalizada
                    }
                  
                }
            break;
            
            case "Trampa Pago a otros"://recuerda que estas solo pueden tener un comportamiento en específico a diferencia de toma una tjt que tiene un paq de comportamientos con los cuales cumplir
                this.dispose();
         
                dialogoTrampa.recibirCasillaResidencia(casillaUbicacion, 0);
                dialogoTrampa.setLocationRelativeTo(null);
                dialogoTrampa.setVisible(true);
            break;                                
        
        case "Trampa Perder turnos":
                 this.dispose();
         
                dialogoTrampa.recibirCasillaResidencia(casillaUbicacion, 1);
                dialogoTrampa.setLocationRelativeTo(null);
                dialogoTrampa.setVisible(true);
            break;                
     
            case "Trampa Mover a":
                this.dispose();
                Casilla casillaMover = new TrampaMoverA(casillaUbicacion);
                casillaTrampaMoverA= (TrampaMoverA)casillaMover;
                
                JOptionPane.showMessageDialog(null, "Al ser aprobado tu diseño, podrás escoger la casilla a mandará a moverse","No olvides...",JOptionPane.INFORMATION_MESSAGE);                    
                trampaMoverA.anadirAlFinal(casillaTrampaMoverA);//Recuerda que aquí el método ya sabe que debe seguir insertando al final... xD como dice su nombre
            
            break;
     
        }
    }//GEN-LAST:event_btn_AceptarTIpoActionPerformed

      /**
     * Empleado para mandar al listado circular, la respectiva casilla creada
     */
    public Casilla retornarCasillas(){//en este caso como no todos tienen un diálogo entonces se procederá a enviar la casilla directamente para no tener complicaciones, porque sde esa manera en el espacio que corresponde
                                                        //a los tipos de casilla sin diálogo retornaría directamente la casilla ya creada, con sus respectivos atributos y normar, si puede decirse así
        
        switch ((String)cbBx_TipoCasilla.getSelectedItem()){
            case "Lugar": 
                return dialogoPropiedades.retornarCasillaLógica();//ahpi te recuerdas que con estas, lo que estás haciendo es crear la hija a partir del padre a diferencia de tomaTjt, donde creas la hija a partir de la hija y luego la asignas a una casilla, esto por si acaso llegara a variar en la funcionalidad      
            case "Servicio básico":
                return dialogoServicioYEstacion.retornarCasillaLógica();           
            case "Estación"://en estos casos con las propiedades en el diálogo mismo escogeŕes cual de todas las casillas deba crar para así solo tener un retorno que las 3 compartan
                return dialogoServicioYEstacion.retornarCasillaLógica();            
            case "Toma una tarjeta":
                return dialogoTomaTarjeta.retornarCasillaLogica();            
            case "Vaya a la cárcel"://vaya a la cárcel
                //aquí se retornará directamente la casilla
                cambiadorItem();
               return (Casilla) casillasVayaCarcel;//pues como la dejó crear directamente, entonces la casilla que tenga la asignación para luego add la cárcel, debería ser la que se retorne            
            case "Cárcel"://carcel
                cambiadorItem();
                return casillasCarcel;
            case "Trampa Mover a":
                return casillaTrampaMoverA;
        }
        
        return dialogoTrampa.retornarCasillaLógica();//pue si no exe nunguna de las anteriores queire decir que le toca a este diáologo devolver, lo cual está asegurado por la
        //acción del combo box, que no permite que hayan más opciones y por ello no sea tan vulnerable  el método
    }
    
    public void cambiadorItem(){
        String cambioAVayaCarcel= "Vaya a la cárcel";       
        String cambioACarcel= "Cárcel";
        
        switch(tipoSeleccion){
            case "Vaya a la cárcel":
                cbBx_TipoCasilla.removeItemAt(7);
                cbBx_TipoCasilla.addItem(cambioACarcel);
                cbBx_TipoCasilla.repaint();
            break;
            
            case "Cárcel":
                cbBx_TipoCasilla.removeItemAt(7);
                cbBx_TipoCasilla.addItem(cambioAVayaCarcel);
                cbBx_TipoCasilla.repaint();
            break;
        }      
        
    }//se entraba 1 vez de tal forma que este método se activaba y por ello cambiaba la referencia, luego debía regresar porque la orden era que diera los datos de sus selección, y como esta cbba, entonces debía volver a entrar al método que a este invoca de tal forma que al hacerlo nuevamente ya llevaba la referencia nueva y no la que se requería
    
    /*
        Este método es llamado desde el backend del tablero, en el momento de tener listo el tablero para jugar, donde revisará si tiene o no casillas almacenadas del tipo que requieren esta customización posterior
        si las tiene, entonces procede a llamar a los método respectivos de cada una, donde lo que hace es llamar al diálogo para que peudan ingresar los respecitvos datos y así se puedan add a la tarjeta, de tal 
        manera que termine de costumizarse, 
    */
    public void establecerMovimientos(){
        if(!trampaMoverA.estaVacia()){
            Nodo<TrampaMoverA> nodoAuxiliar=trampaMoverA.obtnerPrimerNodo();
            while(nodoAuxiliar!=null){
                nodoAuxiliar.obtenerObjectcEnCasilla().establecerIndiceAlCualIr();
                nodoAuxiliar=nodoAuxiliar.obtenerSiguiente();//se llama al método que se encarga de desplegar los debidos diálogos para terminar de crear las tarjetas
            }            
        }//el método muestra el diálogo y hace la debida asignación de los datos según los necesite, en este caso la tjtj es creada pero sin establecer los datos al igual que en toma una Tjt para así no tener que dejar en la espera la creación
        
        if(!tomaUnaTarjeta.estaVacia()){            
            Nodo<TomaUnaTarjeta> nodoAuxiliar=tomaUnaTarjeta.obtnerPrimerNodo();
            while(nodoAuxiliar!=null){
                nodoAuxiliar.obtenerObjectcEnCasilla().establecerDatosFaltantesTarjetas();
                nodoAuxiliar=nodoAuxiliar.obtenerSiguiente();
            }            
            //toma una tarjeta verifica que no sean null las respectivas varibles de moverA y caminar, lo cual hace que aquí no se tenga que estar verificando si se seleccionó cualquiera de 
            //lasopciones implecadas para estar guardando, pero eso provoca que todas las casillas toma una tarjeta tenga o no incluido ese tipo de tjt se acumulen en este listado, por ello sería bueno que no sucediera así para no estar acumulando en vano
        }
    }
      
    public String mandarSeleccionColor(){
        return (String) cbBx_colorCasilla.getSelectedItem();
    }
    
    public boolean hayCabosSueltos(){//esto es para VC y C, puesto que podría haber creado solo VC y no haberle asignado su C
        return  casillasVayaCarcel!=null || casillaTomaTarjeta!=null || casillaIrACarcel!=null;//pues esta tb debe recibir su arcelita, recuerda que se hacen null cuando ya han recibido algo xD
    }
    
    
    public void addCOmponentesParaCOnstrucciones(){//si da mucha cimplicación para obtnerlo y así recoger lo que dentro lleva colocalor en el diseño y solo habilítalis cuando sea lugar
        JLabel labelSimples= new JLabel("Construcciones Simples ");
        JLabel labelSofisticadas= new JLabel("Construcciones Sofisticadas ");
        JFormattedTextField numeroSimples = new JFormattedTextField();
        JFormattedTextField numeroSofisticadas = new JFormattedTextField();        
        numeroSimples.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        numeroSofisticadas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        labelSimples.setBounds(25, 400, 150, 30);
        labelSofisticadas.setBounds(25, 425, 150, 30);
        numeroSimples.setBounds(350, 400, 79, 30);
        numeroSofisticadas.setBounds(350, 425, 79, 30);        
    }//esto se colocaría en lugar por el hecho de que las otras propiedades eliminan, esto.... pero hacer esto provoca que cuando sea la 1ra propiedad escogida "lugar", se superpongan a lo que estaba sin tomar en cuenta que ya nohabía que hacerl
    //Así que mejor solo habilítalo y desabilítalo, este YA NO, lo que se hizo fue deshab y habi
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_AceptarTIpo;
    private javax.swing.JComboBox<String> cbBx_TipoCasilla;
    private javax.swing.JComboBox<String> cbBx_colorCasilla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
